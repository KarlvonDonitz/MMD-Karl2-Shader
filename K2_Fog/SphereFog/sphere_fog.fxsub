#include "../../k2.conf"
#include "../../K2_advanced.conf"
#include "../../K2_shader/Mathematics.fxsub"
#include "../../K2_shader/common.fxsub"
#include "../../K2_shader/shadowcommon.fxsub"
#include "../../K2_shader/gbuffer.fxsub"
#include "../../K2_shader/gbuffer_sampler.fxsub"
#include "../../K2_shader/lighting.fxsub"
#include "../../K2_shader/arealight.fxsub"
#include "../../K2_shader/fog.fxsub"

float mFogR : CONTROLOBJECT<string name="(self)"; string item = "R+";>;
float mFogG : CONTROLOBJECT<string name="(self)"; string item = "G+";>;
float mFogB : CONTROLOBJECT<string name="(self)"; string item = "B+";>;
float mRangeP : CONTROLOBJECT<string name="(self)"; string item = "Range+";>;
float mIntensityP : CONTROLOBJECT<string name="(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name="(self)"; string item = "Intensity-";>;
float mGlossP : CONTROLOBJECT<string name="(self)"; string item = "Gloss+";>;
float mGlossM : CONTROLOBJECT<string name="(self)"; string item = "Gloss-";>;
float mBlink : CONTROLOBJECT<string name="(self)"; string item = "Blink";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float3 mPosition : CONTROLOBJECT<string name="(self)"; string item = "Position";>;

static float LightRange = (1 + mRangeP * LIGHTSOURCE_MAX_RANGE);
static float LightIntensity = lerp(lerp(LIGHTSOURCE_MIN_INTENSITY, LIGHTSOURCE_MAX_INTENSITY, mIntensityP), 0, mIntensityM);
static float3 LightPosition = mPosition;

#if VOLUMETRIC_FOG_ENABLE
#if VOLUMETRIC_FOG_QUALITY == 0
#	define VOLUMETRIC_FOG_WIDTH 256
#	define VOLUMETRIC_FOG_HEIGHT 512
#elif VOLUMETRIC_FOG_QUALITY == 1
#	define VOLUMETRIC_FOG_WIDTH 512
#	define VOLUMETRIC_FOG_HEIGHT 1024
#elif VOLUMETRIC_FOG_QUALITY >= 2
#	define VOLUMETRIC_FOG_WIDTH 1024
#	define VOLUMETRIC_FOG_HEIGHT 2048
#elif VOLUMETRIC_FOG_QUALITY >= 3
#	define VOLUMETRIC_FOG_WIDTH 2048
#	define VOLUMETRIC_FOG_HEIGHT 4096
#else
#	define VOLUMETRIC_FOG_WIDTH 256
#	define VOLUMETRIC_FOG_HEIGHT 512
#endif

texture VolumetricFog: OFFSCREENRENDERTARGET <
	string Description = "Volumetric fog Rendering for SphereFog";
	int Width = VOLUMETRIC_FOG_WIDTH;
	int Height = VOLUMETRIC_FOG_HEIGHT;
	string Format = "R32F";
	float4 ClearColor = { 1, 1, 1, 1 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*.pmx = sphere_shadow.fx;"
		"*.pmd = sphere_shadow.fx;"
		"* = hide";
>;
sampler VolumetricFogSamp = sampler_state {
	texture = <VolumetricFog>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
#endif

void SphereFogVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	Position.xyz = LightPosition + Normal * LightRange;
	oTexcoord1 = Position;
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
}

float4 SphereFogPS(float4 texcoord : TEXCOORD0, float3 position : TEXCOORD1) : COLOR
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float3 P = mul(float4(position, 1), matView).xyz;
	float3 V = normalize(-P);

	LightParam param;
	param.lightPosition = LightPosition;
	param.lightRange = LightRange;
	param.lightIntensity = LightIntensity;
	param.lightColor = float3(mFogR, mFogG, mFogB);
	param.eye = CameraPosition;
	param.gloss = lerp(0.01, 0.999, 0.5 + (mGlossP - mGlossM) * 0.5);
	param.attenuationBulb = lerp(1, 5, mAttenuationBulbP);

#if VOLUMETRIC_FOG_ENABLE
	#if VOLUMETRIC_FOG_QUALITY == 0
		return SphereFog(param, VolumetricFogSamp, VOLUMETRIC_FOG_HEIGHT, V, min(P.z, material.linearDepth), 64);
	#elif VOLUMETRIC_FOG_QUALITY == 1
		return SphereFog(param, VolumetricFogSamp, VOLUMETRIC_FOG_HEIGHT, V, min(P.z, material.linearDepth), 100);
	#elif VOLUMETRIC_FOG_QUALITY == 2
		return SphereFog(param, VolumetricFogSamp, VOLUMETRIC_FOG_HEIGHT, V, min(P.z, material.linearDepth), 150);
	#elif VOLUMETRIC_FOG_QUALITY >= 3
		return SphereFog(param, VolumetricFogSamp, VOLUMETRIC_FOG_HEIGHT, V, min(P.z, material.linearDepth), 200);
	#endif
#else
	return SphereFog(param, V, min(P.z, material.linearDepth), 64);
#endif
}

float4 SphereFogShadowlessPS(float4 texcoord : TEXCOORD0, float3 position : TEXCOORD1) : COLOR
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float3 P = mul(float4(position, 1), matView).xyz;
	float3 V = normalize(-P);

	LightParam param;
	param.lightPosition = LightPosition;
	param.lightRange = LightRange;
	param.lightIntensity = LightIntensity;
	param.lightColor = float3(mFogR, mFogG, mFogB);
	param.eye = CameraPosition;
	param.gloss = lerp(0.01, 0.999, 0.5 + (mGlossP - mGlossM) * 0.5);
	param.attenuationBulb = lerp(1, 5, mAttenuationBulbP);

	return SphereFog(param, V, min(P.z, material.linearDepth), 64);
}

technique MainTech0<string MMDPass = "object"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 SphereFogVS();
		PixelShader  = compile ps_3_0 SphereFogShadowlessPS();
	}
}

technique MainTechBS0<string MMDPass = "object_ss"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 SphereFogVS();
		PixelShader  = compile ps_3_0 SphereFogPS();
	}
}

technique EdgeTec<string MMDPass = "edge";> {}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}