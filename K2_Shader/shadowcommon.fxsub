float4x4 CreateLightViewMatrix(float3 forward, float3 LightPosition)
{
	float3 right = cross(float3(0.0f, 1.0f, 0.0f), forward);
	float3 up;

	if (any(right))
	{
		right = normalize(right);
		up = cross(forward, right);
	}
	else
	{
		right = float3(1.0f, 0.0f, 0.0f);
		up = float3(0.0f, 0.0f, -sign(forward.y));
	}

	float3x3 rotation = { right.x, up.x, forward.x,
						 right.y, up.y, forward.y,
						 right.z, up.z, forward.z };

	return float4x4(rotation[0], 0,
					rotation[1], 0,
					rotation[2], 0,
					mul(-LightPosition, rotation), 1);
}

float4x4 CreateOrthoProject(float width, float height, float near, float far)
{
	float cx = 2.0f / width;
	float cy = 2.0f / height;
	float cz = 1.0f / (far - near);
	float tz = near / (near - far);

	float4x4 m;
	m[0] = float4(cx,  0,  0, 0);
	m[1] = float4( 0, cy,  0, 0);
	m[2] = float4( 0,  0, cz, 0);
	m[3] = float4( 0,  0, tz, 1);
	
	return m;
}

float4x4 CreatePerspectiveProject(float fov, float aspect, float near, float far)
{
	float h = 1.0f / tan(fov);
	float w = h / aspect;
	float q = far / (far - near);

	float4x4 m;
	m[0] = float4(w,  0,  0, 0);
	m[1] = float4( 0, h,  0, 0);
	m[2] = float4( 0,  0, q, 1);
	m[3] = float4( 0,  0, -near * q, 0);

	return m;
}

float4x4 CreateDualViewMatrix(float3 LightPosition, float face)
{
	return float4x4( 1.0f, 0.0f, 0.0f, 0.0f,
					 0.0f, face, 0.0f, 0.0f,
					 0.0f, 0.0f, face, 0.0f,
					 -LightPosition.x, -LightPosition.y * face, -LightPosition.z*face, 1.0f);
}

float4x4 CreateDualProjMatrix(float4 P, float near, float far, float face)
{
	float L = length(P);
	float vL = 1.0f / L;
	float z = far * vL * (L - near) / (far - near);
	return float4x4( vL, 0.0f, 0.0f,  0.0f,
					 0.0f,   0.5f*vL, 0.0f,  0.0f,
					 0.0f,   0.5f*vL*face,  z*vL,  vL,  
					 0.0f,   0.5f*face,     z,     1.0f );
}

float2 CalcDualShadowCoord(float3 L, float height)
{
	bool face = (L.z >= 0) ? true : false;
	if (!face) L.yz = -L.yz;
	float2 coord = L.xy / (1.0f + L.z);
	coord = PosToCoord(coord);
	coord.y = face ? 0.5f * coord.y : 0.5f * (coord.y + 1.0f) + 1.0f / height;
	return coord;
}

float2 CalcFishShadowProj(float2 P, float bias)
{
	float dist = length(P);
	float distortFactor = (1.0 - bias) + dist * bias;
	return P / distortFactor;
}

float2 CalcFishShadowCoord(float2 P, float bias)
{
	float dist = sqrt(dot(P, P));
	float distortFactor = (1.0 - bias) + dist * bias;
	return P / distortFactor;
}

float GaussianDistribution(float x, float y, float r)
{
	float g = 1.0f / sqrt(2.0f * PI * r * r);
	g *= exp(-(x * x + y * y) / (2 * r * r));
	return g;
}

float linstep(float a, float b, float v)
{
	return saturate((v - a) / (b - a));
}

float ReduceLightBleeding(float p_max, float amount)
{
	return linstep(amount, 1.0, p_max);
}

float ChebyshevUpperBound(float2 moments, float t, float minVariance, float amount)
{
	float p = (t < moments.x);
	float variance = max(moments.y - (moments.x * moments.x), minVariance);
	float d = t - moments.x;
	float p_max = ReduceLightBleeding(variance / (variance + d * d), amount);
	return max(p, p_max);
}

float2 ComputeMoments(float depth)
{
	float dx = ddx(depth);
	float dy = ddy(depth);

	float2 moments;
	moments.x = depth;
	moments.y = depth * depth + 0.25 * (dx * dx + dy * dy);

	return moments;
}