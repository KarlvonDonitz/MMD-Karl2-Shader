#include "../../K2.conf"
#include "../../K2_shader.conf"
#include "../../K2_shader/Mathematics.fxsub"
#include "../../K2_shader/common.fxsub"
#include "../../K2_shader/gbuffer.fxsub"
#include "../../K2_shader/gbuffer_sampler.fxsub"
#include "../../K2_shader/ibl.fxsub"

float mEnvRotateX : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvRotateX";>;
float mEnvRotateY : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvRotateY";>;
float mEnvRotateZ : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvRotateZ";>;
float mEnvSSSLightP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvSSSLight+";>;
float mEnvSSSLightM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvSSSLight-";>;
float mEnvDiffLightP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvDiffLight+";>;
float mEnvDiffLightM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvDiffLight-";>;
float mEnvSpecLightP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvSpecLight+";>;
float mEnvSpecLightM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "EnvSpecLight-";>;

float mDiffuseColRP : CONTROLOBJECT<string name="(self)"; string item = "DiffuseR+";>;
float mDiffuseColGP : CONTROLOBJECT<string name="(self)"; string item = "DiffuseG+";>;
float mDiffuseColBP : CONTROLOBJECT<string name="(self)"; string item = "DiffuseB+";>;
float mDiffuseColRM : CONTROLOBJECT<string name="(self)"; string item = "DiffuseR-";>;
float mDiffuseColGM : CONTROLOBJECT<string name="(self)"; string item = "DiffuseG-";>;
float mDiffuseColBM : CONTROLOBJECT<string name="(self)"; string item = "DiffuseB-";>;
float mDiffuseCol  :  CONTROLOBJECT<string name="(self)"; string item = "DiffuseGray+";>;

float mSpecularColRP : CONTROLOBJECT<string name="(self)"; string item = "SpecularR+";>;
float mSpecularColGP : CONTROLOBJECT<string name="(self)"; string item = "SpecularG+";>;
float mSpecularColBP : CONTROLOBJECT<string name="(self)"; string item = "SpecularB+";>;
float mSpecularColRM : CONTROLOBJECT<string name="(self)"; string item = "SpecularR-";>;
float mSpecularColGM : CONTROLOBJECT<string name="(self)"; string item = "SpecularG-";>;
float mSpecularColBM : CONTROLOBJECT<string name="(self)"; string item = "SpecularB-";>;
float mSpecularCol  :  CONTROLOBJECT<string name="(self)"; string item = "SpecularGray+";>;

static float4 mBalanceDiffuse = float4(float3(mDiffuseColRP, mDiffuseColGP, mDiffuseColBP) - float3(mDiffuseColRM, mDiffuseColGM, mDiffuseColBM), mDiffuseCol);
static float4 mBalanceSpecular = float4(float3(mSpecularColRP, mSpecularColGP, mSpecularColBP) - float3(mSpecularColRM, mSpecularColGM, mSpecularColBM), mSpecularCol);

static float mEnvIntensitySSS  = lerp(lerp(mEnvLightIntensityMin, mEnvLightIntensityMax, mEnvSSSLightP),  0, mEnvSSSLightM);
static float mEnvIntensitySpec = lerp(lerp(mEnvLightIntensityMin, mEnvLightIntensityMax, mEnvSpecLightP), 0, mEnvSpecLightM);
static float mEnvIntensityDiff = lerp(lerp(mEnvLightIntensityMin, mEnvLightIntensityMax, mEnvDiffLightP), 0, mEnvDiffLightM);

static float3x3 matTransform = CreateRotate(float3(mEnvRotateX, mEnvRotateY, mEnvRotateZ) * PI_2);

texture DiffuseMap<string ResourceName = IBLDIFF_MAP_FILE; int Miplevels = 1;>;
sampler DiffuseMapSamp = sampler_state {
	texture = <DiffuseMap>;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = NONE;
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

texture SpecularMap<string ResourceName = IBLSPEC_MAP_FILE; int Miplevels = IBL_MIPMAP_LEVEL;>;
sampler SpecularMapSamp = sampler_state {
	texture = <SpecularMap>;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

float3 DecodeHDR(float4 rgbx)
{
#if IBL_HDR_ENABLE
	#if IBL_RGBT_RANGE
		return DecodeRGBT(rgbx, IBL_RGBT_RANGE);
	#elif IBL_RGBM_RANGE
		return DecodeRGBM(rgbx, IBL_RGBM_RANGE);
	#else
		return DecodeRGBM(rgbx, 6);
	#endif
#else
	return rgbx.rgb;
#endif
}

float4 ImageBasedLightClearCost(MaterialParam material, float3 N, float3 V, float2 coord)
{
	float level = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.customDataA);
	float fresnel = FresnelSchlickClearCoat(N, V, material.customDataA, 0.04);
	float3 prefilteredSpeculr = DecodeHDR(tex2Dlod(SpecularMapSamp, float4(coord, 0, level)));
	return float4(prefilteredSpeculr, fresnel);
}

float3 ImageBasedLightSubsurface(MaterialParam material, float3 N, float3 prefilteredDiffuse)
{
	float3 dependentSplit = 0.5;
	float3 scattering = prefilteredDiffuse + DecodeHDR(tex2Dlod(DiffuseMapSamp, float4(ComputeSphereCoord(-N), 0, 0)));
	scattering *= material.customDataB * material.customDataA * dependentSplit;
	return scattering * mEnvIntensitySSS;
}

void ShadingMaterial(MaterialParam material, float3 worldView, float finalSmoothness, out float3 diffuse, out float3 specular)
{
	float3 worldNormal = mul(material.normal, (float3x3)matViewInverse);
	float3 worldReflect = EnvironmentReflect(worldNormal, worldView);

	float3 V = mul(matTransform, worldView);
	float3 N = mul(matTransform, worldNormal);
	float3 R = mul(matTransform, worldReflect);

	float mipLayer = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.smoothness);
	float3 fresnel = EnvironmentSpecularUnreal4(worldNormal, worldView, finalSmoothness, material.specular);

	float2 coord1 = ComputeSphereCoord(N);
	float2 coord2 = ComputeSphereCoord(R);

	float3 prefilteredDiffuse = DecodeHDR(tex2Dlod(DiffuseMapSamp, float4(coord1, 0, 0)));
	float3 prefilteredSpeculr = DecodeHDR(tex2Dlod(SpecularMapSamp, float4(coord2, 0, mipLayer)));

	prefilteredDiffuse = ColorBalance(prefilteredDiffuse, mBalanceDiffuse);
	prefilteredSpeculr = ColorBalance(prefilteredSpeculr, mBalanceSpecular);

	diffuse = prefilteredDiffuse * mEnvIntensityDiff;
	specular = prefilteredSpeculr * fresnel;

	[branch]
	if (material.lightModel == SHADINGMODELID_CLEAR_COAT)
	{
		float4 specular2 = ImageBasedLightClearCost(material, worldNormal, worldView, coord2);
		specular = lerp(specular, specular2.rgb, specular2.a);
	}
	else if (material.lightModel == SHADINGMODELID_SKIN || 
			 material.lightModel == SHADINGMODELID_SUBSURFACE ||
			 material.lightModel == SHADINGMODELID_GLASS)
	{
		diffuse += ImageBasedLightSubsurface(material, N, prefilteredDiffuse) * (1 + fresnel);
	}

	specular *= mEnvIntensitySpec;
	specular *= step(0, sum(material.specular) - 1e-5);
}

#if AA_GBUFFER_FILTER_QUALITY
float3 ComputeAvgNormal(sampler NormalMap, float2 coord, float2 offset)
{
	float3 avgNormal = 0;
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2(-1,  0) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 1,  0) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 0,  1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 0, -1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2(-1, -1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 1,  1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2(-1,  1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 1, -1) * offset, 0, 0)));
	return avgNormal / 9;
}

float AdjustRoughness(float roughness, float3 normal)
{
	float len = length(normal);
	if (len < 1.0)
	{
		float len2 = len * len;
		float kappa = (3 * len - len * len2) / (1 - len2);
		float variance = 1.0 / (2.0 * kappa);
		return sqrt(roughness * roughness + variance);
	}
	else
	{
		return roughness;
	}
}
#endif

void EnvLightingVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	oTexcoord1= CameraPosition - Position.xyz;
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
}

void EnvLightingPS(
	in float4 texcoord : TEXCOORD0,
	in float3 viewdir  : TEXCOORD1,
	in float4 screenPosition : SV_Position,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1)
{
#if IBL_ENABLE
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam materialAlpha;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	float3 sum1 = materialAlpha.albedo + materialAlpha.specular;
	clip(sum(sum1) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);

	float finalSmoothness = material.smoothness;

#if AA_GBUFFER_FILTER_QUALITY > 0
	float roughness = SmoothnessToRoughness(material.smoothness);
	float3 avgNormal = ComputeAvgNormal(Gbuffer2Map, coord, ViewportOffset2);
	finalSmoothness = RoughnessToSmoothness(AdjustRoughness(roughness, avgNormal));
#endif

	float3 V = normalize(viewdir);

	float3 diffuse, specular;
	ShadingMaterial(material, V, finalSmoothness, diffuse, specular);

	float3 diffuse2, specular2;
	ShadingMaterial(materialAlpha, V, materialAlpha.smoothness, diffuse2, specular2);

	oColor0 = EncodeYcbcr(screenPosition, diffuse, specular);
	oColor1 = EncodeYcbcr(screenPosition, diffuse2, specular2);
#else
	oColor0 = EncodeYcbcr(screenPosition, 0, 0);
	oColor1 = EncodeYcbcr(screenPosition, 0, 0);
#endif
}

void EnvLightingFastPS(
	in float4 texcoord : TEXCOORD0,
	in float3 viewdir  : TEXCOORD1,
	in float4 screenPosition : SV_Position,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1)
{
#if IBL_ENABLE
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam materialAlpha;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	float3 sum1 = materialAlpha.albedo + materialAlpha.specular;
	clip(sum(sum1) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);

	float3 V = normalize(viewdir);

	float3 diffuse, specular;
	ShadingMaterial(material, V, material.smoothness, diffuse, specular);

	float3 diffuse2, specular2;
	ShadingMaterial(materialAlpha, V, materialAlpha.smoothness, diffuse2, specular2);

	oColor0 = EncodeYcbcr(screenPosition, diffuse , specular);
	oColor1 = EncodeYcbcr(screenPosition, diffuse2, specular2);
#else
	oColor0 = EncodeYcbcr(screenPosition, 0, 0);
	oColor1 = EncodeYcbcr(screenPosition, 0, 0);
#endif
}

const float4 BackColor = float4(0,0,0,0);
const float4 IBLColor  = float4(0,0.5,0,0.5);

shared texture EnvLightAlphaMap : RENDERCOLORTARGET;

technique MainTech<string MMDPass = "object";
	string Script =
	"ClearSetColor=BackColor;"
	"RenderColorTarget0=LightAlphaMap;"
	"Clear=Color;"
	"RenderColorTarget0=LightSpecMap;"
	"Clear=Color;"
	"RenderColorTarget0=;"
	"RenderColorTarget1=EnvLightAlphaMap;"
	"ClearSetColor=IBLColor;"
	"Clear=Color;"
	"Pass=DrawObject;"
;> {
	pass DrawObject {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		CullMode = CCW;
		VertexShader = compile vs_3_0 EnvLightingVS();
		PixelShader  = compile ps_3_0 EnvLightingFastPS();
	}
}

technique MainTechSS<string MMDPass = "object_ss";
	string Script =
	"ClearSetColor=BackColor;"
	"RenderColorTarget0=LightAlphaMap;"
	"Clear=Color;"
	"RenderColorTarget0=LightSpecMap;"
	"Clear=Color;"
	"RenderColorTarget0=;" 
	"RenderColorTarget1=EnvLightAlphaMap;" 
	"ClearSetColor=IBLColor;"
	"Clear=Color;"
	"Pass=DrawObject;" 
;> {
	pass DrawObject {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		CullMode = CCW;
		VertexShader = compile vs_3_0 EnvLightingVS();
		PixelShader  = compile ps_3_0 EnvLightingPS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}