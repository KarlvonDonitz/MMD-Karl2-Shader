float ComputeSpecularMicroOcclusion(float f0)
{
	return saturate(dot(f0, 0.33333h) * 50);
}

float ComputeSpecularMicroOcclusion(float3 f0)
{
	return saturate(dot(f0, 0.33333h) * 50);
}

float fresnelSchlick(float f0, float f9, float vh)
{
	return lerp(f0, f9, pow5(1 - vh));
}

float3 fresnelSchlick(float3 f0, float3 f9, float vh)
{
	return lerp(f0, f9, pow5(1 - vh));
}

float ComputeAmbientMicroOcclusion(float3 N, float3 L, float ao)
{
	float nl = dot(N, L);
	float aperture = 2.0 * pow2(ao);
	float shadow = saturate(abs(nl) + aperture - 1.0);
	return shadow;
}

float3 SubsurfaceShadingSkinRamp(MaterialParam material, float3 N, float3 L)
{
	float nl = dot(N, L);
	float t = saturate(nl * 0.5 + 0.5);
	return pow(float3(0.8 + material.customDataA * 0.1, 0.35, 0.05), t * 12.0) * saturate(nl);
}

float3 SubsurfaceShadingPreIntegratedSkin(MaterialParam material, float3 N, float3 L)
{
	float nl = saturate(dot(N, L) * 0.5 + 0.5);
	float curvature = material.customDataA;
	float curva = (1.0 / madd(curvature, 0.5 - 0.0625, 0.0625) - 2.0) / (16.0 - 2.0);
	float oneMinusCurva = 1.0 - curva;

	float3 rangeMin = float3(0.0, 0.3, 0.3);
	float3 rangeMax = float3(1.0, 0.7, 0.7);
	float3 offset = float3(0.0, 0.06, 0.06);
	float3 t = saturate(madd(nl, 1.0 / (rangeMax - rangeMin), (offset + rangeMin) / (rangeMin - rangeMax)));
	float3 lowerLine = (t * t) * float3(0.65, 0.5, 0.9);
	lowerLine.r += 0.045;
	lowerLine.b *= t.b;

	float3 m1 = float3(1.75, 2.0, 1.97);
	float3 m2 = float3(1.95, 2.0, 2.0);

	float3 lerpMin = float3(0.0, 0.35, 0.35);
	float3 lerpMax = float3(1.0, 0.7 , 0.6);
	float3 lerpT = saturate(madd(nl, 1.0 / (lerpMax - lerpMin), lerpMin / (lerpMin - lerpMax)));

	float3 upperLine1 = saturate(madd(nl, m1, float3(0.99, 0.99, 0.99) -m1));
	float3 upperLine2 = saturate(madd(nl, m2, float3(0.99, 0.99, 1.0) - m2));

	float3 curve1 = lerp(lowerLine, upperLine1, lerpT * lerpT);
	float3 curve2 = upperLine2;

	float oneMinusCurva2 = oneMinusCurva * oneMinusCurva;

	float3 brdf = lerp(curve1, curve2, madd(oneMinusCurva2, -1.0 * oneMinusCurva2, 1.0));

	return material.customDataB * brdf;
}

float3 SubsurfaceShadingScattering(MaterialParam material, float3 N, float3 L, float3 V)
{
	float w = 0.5;
	float nl = saturate((dot(-N, L) + w) / pow2(1 + w));
	return material.customDataB * nl;
}

float BurleyBRDF(float nl, float vh, float nv, float roughness)
{
	float energyBias = 0.5 * roughness;
	float energyFactor = lerp(1, 1 / 1.51, roughness);

	float Fd90 = energyBias + 2.0 * vh * vh * roughness;
	float FdV = lerp(1, Fd90, pow5(1 - max(nv, 0.1)));
	float FdL = lerp(1, Fd90, pow5(1 - nl));

	return FdV * FdL * energyFactor;
}

float DiffuseBRDF(float3 N, float3 L, float3 V, float roughness)
{
	float3 H = normalize(V + L);

	float nl = saturate(dot(N, L));
	float vh = saturate(dot(V, H));
	float nv = abs(dot(N, V));

	return BurleyBRDF(nl, vh, nv, roughness) * nl;
}

float3 SpecularBRDF_Blinn(float nh, float nl, float vh, float nv, float smoothness, float3 specular, float NormalizationFactor)
{
	float alpha = exp2(10 * smoothness + 1);
	float D = ((alpha + 2) / 8) * pow(nh, alpha) * NormalizationFactor;
	return D;
}

float3 SpecularBRDF_GGX(float nh, float nl, float vh, float nv, float roughness, float3 specular, float NormalizationFactor)
{
	float m2 = roughness * roughness;
	float spec = (nh * m2 - nh) * nh + 1;
	spec = m2 / (spec * spec) * NormalizationFactor;

	float Gv = nl * (nv * (1 - m2) + m2);
	float Gl = nv * (nl * (1 - m2) + m2);
	spec *= 0.5 / (Gv + Gl);

	float3 f0 = specular;
	float3 f90 = ComputeSpecularMicroOcclusion(f0);
	float3 fresnel = fresnelSchlick(f0, f90, vh);

	return fresnel * spec;
}

float3 SpecularBRDF_InvGGX(float nh, float nl, float vh, float nv, float roughness, float3 specular, float NormalizationFactor)
{
	float m2 = roughness * roughness;
	float A = 4;
	float spec = (nh - nh * m2) * nh + m2;
	spec = (1 + 4 * m2 * m2 / (spec * spec)) / (PI * (1 + A * m2)) * NormalizationFactor;

	float G = 4 * (nl + nv - nl * nv);
	spec /= G;

	float3 f0 = specular;
	float3 fresnel = fresnelSchlick(f0, 1.0, vh);

	return fresnel * spec;
}

float4 SpecularBRDF_ClearCoat(float nh, float nl, float vh, float nv, float roughness, float specular, float NormalizationFactor)
{
	float m2 = roughness * roughness;
	float spec = (nh * m2 - nh) * nh + 1;
	spec = m2 / (spec * spec) * NormalizationFactor;

	float G = (4 * vh * vh + 1e-5);
	spec /= G;

	float fresnel = fresnelSchlick(specular, 1.0, vh);
	return float4(spec, spec, spec, fresnel);
}

float3 ClothShading(MaterialParam material, float nh, float nl, float vh, float nv, float roughness, float normalizeFactor)
{
	float3 spec1 = SpecularBRDF_GGX(nh, nl, vh, nv, roughness, material.specular, normalizeFactor);
	float3 spec2 = SpecularBRDF_InvGGX(nh, nl, vh, nv, roughness, material.customDataB, normalizeFactor);
	float3 spec = lerp(spec1, spec2, material.customDataA);
	return spec;
}

float3 ClearCoatShading(MaterialParam material, float nh, float nl, float vh, float nv, float roughness, float normalizeFactor)
{
	float clearcoat = max(SmoothnessToRoughness(material.customDataA), 0.001);
	float3 spec1 = SpecularBRDF_GGX(nh, nl, vh, nv, roughness, material.specular, normalizeFactor);
	float4 spec2 = SpecularBRDF_ClearCoat(nh, nl, vh, nv, clearcoat, 0.04, normalizeFactor);
	return lerp(spec1, spec2.rgb, spec2.a);
}

float4 SurfaceEnergy(MaterialParam material, float3 N, float3 L, float3 V, float normalizeFactor = 1.0)
{
	float3 H = normalize(V + L);

	float nh = saturate(dot(N, H));
	float nl = saturate(dot(N, L));
	float vh = saturate(dot(V, H));
	float nv = abs(dot(N, V)) + 1e-5h;

	float roughness = max(SmoothnessToRoughness(material.smoothness), 0.001);
	float diffuse = BurleyBRDF(nl, vh, nv, roughness);

	float3 specular = 0;
	if (material.lightModel == SHADINGMODELID_CLOTH)
		specular = ClothShading(material, nh, nl, vh, nv, roughness, normalizeFactor);
	else if (material.lightModel == SHADINGMODELID_CLEAR_COAT)
		specular = ClearCoatShading(material, nh, nl, vh, nv, roughness, normalizeFactor);
	else if (material.lightModel == SHADINGMODELID_GLASS)
		specular = SpecularBRDF_Blinn(nh, nl, vh, nv, material.smoothness, material.specular, normalizeFactor);
	else
		specular = SpecularBRDF_GGX(nh, nl, vh, nv, roughness, material.specular, normalizeFactor);

	return float4(diffuse, specular) * nl;
}

float4 SurfaceEnergy(MaterialParam material, float3 N, float3 Ld, float3 Ls, float3 V, float normalizeFactor = 1.0)
{
	float3 H = normalize(V + Ls);

	float nh = saturate(dot(N, H));
	float nl = saturate(dot(N, Ls));
	float vh = saturate(dot(V, H));
	float nv = abs(dot(N, V)) + 1e-5h;

	float roughness = max(SmoothnessToRoughness(material.smoothness), 0.001);
	float diffuse = DiffuseBRDF(N, Ld, V, roughness);

	float3 specular = 0;
	if (material.lightModel == SHADINGMODELID_CLOTH)
		specular = ClothShading(material, nh, nl, vh, nv, roughness, normalizeFactor);
	else if (material.lightModel == SHADINGMODELID_CLEAR_COAT)
		specular = ClearCoatShading(material, nh, nl, vh, nv, roughness, normalizeFactor);
	else if (material.lightModel == SHADINGMODELID_GLASS)
		specular = SpecularBRDF_Blinn(nh, nl, vh, nv, material.smoothness, material.specular, normalizeFactor);
	else
		specular = SpecularBRDF_GGX(nh, nl, vh, nv, roughness, material.specular, normalizeFactor);

	return float4(diffuse, specular * nl);
}

float3 SubsurfaceShading(MaterialParam material, float3 N, float3 L, float3 V)
{
	if (material.lightModel == SHADINGMODELID_SKIN)
		return SubsurfaceShadingPreIntegratedSkin(material, N, L);
	else if (material.lightModel == SHADINGMODELID_SUBSURFACE)
		return SubsurfaceShadingScattering(material, N, L, V);
	else
		return 0;
}

float3 SubsurfaceShadingFast(MaterialParam material, float3 N, float3 L, float3 V)
{
	if (material.lightModel == SHADINGMODELID_SKIN)
		return SubsurfaceShadingSkinRamp(material, N, L);
	else if (material.lightModel == SHADINGMODELID_SUBSURFACE)
		return SubsurfaceShadingScattering(material, N, L, V);
	else
		return 0;
}