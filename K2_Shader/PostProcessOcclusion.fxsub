#if SSDO_QUALITY == 1 || SSDO_QUALITY == 4
#	define SSDO_SAMPLER_COUNT 8
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 2 || SSDO_QUALITY == 5
#	define SSDO_SAMPLER_COUNT 12
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 3 || SSDO_QUALITY == 6
#	define SSDO_SAMPLER_COUNT 16
#	define SSDO_BLUR_RADIUS 6
#else
#	define SSDO_SAMPLER_COUNT 8
#	define SSDO_BLUR_RADIUS 6
#endif

#if SSDO_QUALITY >= 4
#	define SSDO_LOW_SAMPLER_COUNT 12
#endif

static const float2 SSDOKernel[16] = 
{
	float2( -0.14, -0.02 ),
	float2( -0.04, 0.24 ),
	float2( 0.36, 0.08 ),
	float2(-0.46, -0.08),
	float2( 0.26, -0.4 ),
	float2(-0.127, -0.347),
	float2( -0.44, -0.34 ),
	float2( -0.52, 0.4 ),
	float2(-0.226, 0.589),
	float2( 0.3, 0.68 ),
	float2( 0.7, 0.356),
	float2( 0.47, -0.287),
	float2( 0.84, -0.32 ),
	float2( 0.4, -0.74),
	float2(-0.338, -0.684),
	float2(-0.622, -0.415)
};

float linearizeDepth(float2 uv)
{
	return tex2Dlod(DepthMapSamp, float4(uv, 0, 0)).r;
}

float linearizeDepth2(float2 uv)
{
	return tex2Dlod(Gbuffer8Map, float4(uv, 0, 0)).r;
}

float3 GetNormal(float2 uv)
{
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(uv, 0, 0));
	return DecodeGBufferNormal(MRT6);
}

float4 ScreenSpaceDirOccPassVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oTexcoord2 : TEXCOORD2) : POSITION
{
	oTexcoord0 = Texcoord;
	oTexcoord0.xy += ViewportOffset;
	oTexcoord0.zw = oTexcoord0.xy * ViewportSize;
	oTexcoord1 = GetProjConstant(); 
	oTexcoord2.xy = float2(mSSDOParams[0], mSSDOParams[1]) * float2(1, ViewportAspect);
	oTexcoord2.zw = float2(mSSDOParams[2], mSSDOParams[3]) / oTexcoord1.x;
	return Position;
}

#if SSDO_LOW_SAMPLER_COUNT
float4 ScreenSpaceDirOccLowPS(
	float4 coord,
	float3 viewNormal,
	float3 viewPosition,
	float  SSDOJitter,
	float  SSDOBias,
	float  SSDORadius,
	float4 SSDOParams1,
	float4 SSDOParams2)
{
	float2 sampleRotate[16];
	float4 sampleOcclustion = 0.0f;
	float2 sampleRadius = SSDOParams2.w * SSDORadius * ViewportAspect / SSDO_LOW_SAMPLER_COUNT;

	for (int i = 1; i <= SSDO_LOW_SAMPLER_COUNT; i++)
	{
		float2 angle;
		sincos(i * 7.0 * PI_2 / SSDO_LOW_SAMPLER_COUNT + SSDOJitter, angle.x, angle.y);
		sampleRotate[i - 1] = angle * sampleRadius * i;
	}

	for (int j = 0; j < SSDO_LOW_SAMPLER_COUNT; j+=4)
	{
		float2 sampleOffset[4];
		sampleOffset[0] = coord.xy + sampleRotate[j + 0];
		sampleOffset[1] = coord.xy + sampleRotate[j + 1];
		sampleOffset[2] = coord.xy + sampleRotate[j + 2];
		sampleOffset[3] = coord.xy + sampleRotate[j + 3];

		float4 sampleDepths;
		sampleDepths[0] = linearizeDepth(sampleOffset[0]);
		sampleDepths[1] = linearizeDepth(sampleOffset[1]);
		sampleDepths[2] = linearizeDepth(sampleOffset[2]);
		sampleDepths[3] = linearizeDepth(sampleOffset[3]);
		sampleDepths = abs(sampleDepths);

		float3 samplePosition[4];
		samplePosition[0] = float3(sampleOffset[0] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[0];
		samplePosition[1] = float3(sampleOffset[1] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[1];
		samplePosition[2] = float3(sampleOffset[2] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[2];
		samplePosition[3] = float3(sampleOffset[3] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[3];

		float3 sampleDirection[4];
		sampleDirection[0] = samplePosition[0] - viewPosition;
		sampleDirection[1] = samplePosition[1] - viewPosition;
		sampleDirection[2] = samplePosition[2] - viewPosition;
		sampleDirection[3] = samplePosition[3] - viewPosition;

		float4 sampleLength2 = float4(
			dot(sampleDirection[0], sampleDirection[0]),
			dot(sampleDirection[1], sampleDirection[1]),
			dot(sampleDirection[2], sampleDirection[2]),
			dot(sampleDirection[3], sampleDirection[3]));

		sampleDirection[0] *= rsqrt(sampleLength2[0]);
		sampleDirection[1] *= rsqrt(sampleLength2[1]);
		sampleDirection[2] *= rsqrt(sampleLength2[2]);
		sampleDirection[3] *= rsqrt(sampleLength2[3]);

		float4 sampleAngle = float4(
			dot(sampleDirection[0], viewNormal),
			dot(sampleDirection[1], viewNormal),
			dot(sampleDirection[2], viewNormal),
			dot(sampleDirection[3], viewNormal));

		float emitterScale = 5.0;
		float emitterRadius = (sampleRadius.x * viewPosition.z) * SSDOParams1.x;
		float emitterArea = (emitterScale * emitterRadius * emitterRadius) * PI;

		float4 sh = emitterArea * saturate(sampleAngle - SSDOBias) / (sampleLength2 + emitterArea);

		sampleOcclustion.w += sum(sh);
		sampleOcclustion.xyz += sh.x * sampleDirection[0];
		sampleOcclustion.xyz += sh.y * sampleDirection[1];
		sampleOcclustion.xyz += sh.z * sampleDirection[2];
		sampleOcclustion.xyz += sh.w * sampleDirection[3];
	}

	sampleOcclustion /= SSDO_LOW_SAMPLER_COUNT;

	return float4(sampleOcclustion.xyz * 0.5 + 0.5, sampleOcclustion.w);
}
#endif

float4 ScreenSpaceDirOccMediumPS(
	float4 coord,
	float3 viewNormal,
	float3 viewPosition,
	float  SSDOJitter,
	float  SSDOBias,
	float  SSDORadius,
	float4 SSDOParams1,
	float4 SSDOParams2)
{
	float2 sampleRotate[16];
	float2 sampleRadius = clamp(SSDOParams2.xy / viewPosition.z, SSDOParams2.z, SSDOParams2.w * SSDORadius);
	float2 sampleSinCos = float2(sin(SSDOJitter), cos(SSDOJitter));
	float4 sampleOcclustion = 0.0f;

	float2x2 sampleRotMat = { sampleSinCos.y, sampleSinCos.x, -sampleSinCos.x, sampleSinCos.y };

	[unroll]
	for (int i = 0; i < SSDO_SAMPLER_COUNT; i+=4)
	{
		sampleRotate[i + 0] = mul(SSDOKernel[i + 0].xy, sampleRotMat) * sampleRadius;
		sampleRotate[i + 1] = mul(SSDOKernel[i + 1].xy, sampleRotMat) * sampleRadius;
		sampleRotate[i + 2] = mul(SSDOKernel[i + 2].xy, sampleRotMat) * sampleRadius;
		sampleRotate[i + 3] = mul(SSDOKernel[i + 3].xy, sampleRotMat) * sampleRadius;
	}

	[unroll]
	for (int j = 0; j < SSDO_SAMPLER_COUNT; j+=4)
	{
		float2 sampleOffset[4];
		sampleOffset[0] = coord.xy + sampleRotate[j + 0];
		sampleOffset[1] = coord.xy + sampleRotate[j + 1];
		sampleOffset[2] = coord.xy + sampleRotate[j + 2];
		sampleOffset[3] = coord.xy + sampleRotate[j + 3];

		float4 sampleDepths;
		sampleDepths[0] = linearizeDepth(sampleOffset[0]);
		sampleDepths[1] = linearizeDepth(sampleOffset[1]);
		sampleDepths[2] = linearizeDepth(sampleOffset[2]);
		sampleDepths[3] = linearizeDepth(sampleOffset[3]);
		sampleDepths = abs(sampleDepths);

		float3 samplePosition[4];
		samplePosition[0] = float3(sampleOffset[0] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[0];
		samplePosition[1] = float3(sampleOffset[1] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[1];
		samplePosition[2] = float3(sampleOffset[2] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[2];
		samplePosition[3] = float3(sampleOffset[3] * SSDOParams1.xy + SSDOParams1.zw, 1) * sampleDepths[3];

		float3 sampleDirection[4];
		sampleDirection[0] = samplePosition[0] - viewPosition;
		sampleDirection[1] = samplePosition[1] - viewPosition;
		sampleDirection[2] = samplePosition[2] - viewPosition;
		sampleDirection[3] = samplePosition[3] - viewPosition;

		float4 sampleLength2 = float4(
			dot(sampleDirection[0], sampleDirection[0]),
			dot(sampleDirection[1], sampleDirection[1]),
			dot(sampleDirection[2], sampleDirection[2]),
			dot(sampleDirection[3], sampleDirection[3]));

		sampleDirection[0] *= rsqrt(sampleLength2[0]);
		sampleDirection[1] *= rsqrt(sampleLength2[1]);
		sampleDirection[2] *= rsqrt(sampleLength2[2]);
		sampleDirection[3] *= rsqrt(sampleLength2[3]);

		float4 sampleAngle = float4(
			dot(sampleDirection[0], viewNormal),
			dot(sampleDirection[1], viewNormal),
			dot(sampleDirection[2], viewNormal),
			dot(sampleDirection[3], viewNormal));

		float emitterScale = 2.5;
		float emitterRadius = (sampleRadius.x * viewPosition.z) * SSDOParams1.x;
		float emitterArea = (emitterScale * emitterRadius * emitterRadius) * PI * 0.25;

		float4 sh = emitterArea * saturate(sampleAngle - SSDOBias) / (sampleLength2 + emitterArea);

		sampleOcclustion.w += sum(sh);
		sampleOcclustion.xyz += sh.x * sampleDirection[0];
		sampleOcclustion.xyz += sh.y * sampleDirection[1];
		sampleOcclustion.xyz += sh.z * sampleDirection[2];
		sampleOcclustion.xyz += sh.w * sampleDirection[3];
	}

	sampleOcclustion /= SSDO_SAMPLER_COUNT;

	return float4(sampleOcclustion.xyz * 0.5 + 0.5, sampleOcclustion.w);
}

float4 ScreenSpaceDirOccPassPS(
	in float4 coord : TEXCOORD0,
	in float4 SSDOParams1 : TEXCOORD1,
	in float4 SSDOParams2 : TEXCOORD2) : COLOR
{
	float linearDepth = linearizeDepth(coord.xy);
	float linearDepth2 = abs(linearDepth);

	float3 viewNormal = GetNormal(coord.xy);
	float3 viewPosition = GetViewPosition(SSDOParams1, coord.xy, linearDepth2);

	float sampleJitter = GetJitterOffset(coord.zw) * PI_2;
	float sampleBias = 0;
	sampleBias += mSSDOBiasFar * linearDepth2;
	sampleBias += mSSDOBiasNear * (1 - saturate(linearDepth2 / mSSDOBiasFalloffNear));

	float maxRadius = 1.0;
	if (floor(fmod(coord.z, 2)) > 0) maxRadius *= 0.5;
	if (floor(fmod(coord.w, 2)) > 0) maxRadius *= 0.5;

#if SSDO_QUALITY >= 4
	float4 sh1 = ScreenSpaceDirOccLowPS(coord, viewNormal, viewPosition, sampleJitter, sampleBias, maxRadius, SSDOParams1, SSDOParams2);
	float4 sh2 = ScreenSpaceDirOccMediumPS(coord, viewNormal, viewPosition, sampleJitter, sampleBias, maxRadius, SSDOParams1, SSDOParams2);

	float4 sh = sh1.w > sh2.w ? sh1 : sh2;
#else
	float4 sh = ScreenSpaceDirOccMediumPS(coord, viewNormal, viewPosition, sampleJitter, sampleBias, maxRadius, SSDOParams1, SSDOParams2);
#endif

	sh.w = sh.w * (linearDepth < 0.0 ? 0.35 : 1.0);
	sh.w = 1 - sh.w;
	sh.w = pow(sh.w, mSSAOScale);

	return sh;
}

float4 ScreenSpaceDirOccBlurPS(
	in float2 coord   : TEXCOORD0,
	in float3 viewdir : TEXCOORD1,
	uniform sampler source,
	uniform float2 offset) : COLOR
{
	float center_d = linearizeDepth2(coord);

	float total_w = 1.0f;
	float4 total_c = tex2Dlod(source, float4(coord, 0, 0));

	float3 normal = GetNormal(coord);

	float angle = pow2(saturate(dot(normal, normalize(viewdir))));
	float falloff = ALN2I / (0.5 * SSDO_BLUR_RADIUS * SSDO_BLUR_RADIUS);

	float sharpness = 0;
	sharpness = lerp(mSSDOBlurSharpnessMax * angle, mSSDOBlurSharpnessMin, saturate(center_d / mSSDOBlurFalloff));
	sharpness = lerp(mSSDOBlurSharpnessMax, sharpness, saturate(center_d / mSSDOBiasFalloffNear));

	float2 offset1 = coord + offset;
	float2 offset2 = coord - offset;

	[unroll]
	for (int r = 1; r < SSDO_BLUR_RADIUS; ++r)
	{
		float2 depth = float2(linearizeDepth2(offset1), linearizeDepth2(offset2));
		float2 weight = exp2(-r * r * falloff - pow2((depth - center_d) * sharpness));

		weight.x *= saturate(dot(GetNormal(offset1), normal));
		weight.y *= saturate(dot(GetNormal(offset2), normal));

		total_c += tex2Dlod(source, float4(offset1, 0, 0)) * weight.x;
		total_c += tex2Dlod(source, float4(offset2, 0, 0)) * weight.y;

		total_w += sum(weight);

		offset1 += offset;
		offset2 -= offset;
	}

	return total_c / total_w;
}